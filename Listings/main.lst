A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 18:43:06 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\Objects\m
                      ain.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;======================================================================|
                       2     ; Practica 4, FUNDAMENTOS DE MICROPROCESADORES, ITESO.     |
                       3     ; AUTORES:                                                             |
                       4     ;       -ALEJANDRO WALLS        is693215@iteso.mx                      |
                       5     ;       -MARIO EUGENIO ZUï¿½IGA   ie693110@iteso.mx                      |
                       6     ;======================================================================|
                       7     
                       8     ;P3            Serial
                       9     ;P2.0 - 2.3    Salida Decoder Teclado
                      10     ;P2.7          Senal E de LCD
                      11     ;P2.6          Senal RS de LCD
                      12     ;P1            Datos LCD
                      13     
                      14     ; use command 01 for clearing display
                      15     ; use command 80 for first line of display
                      16     ; use command C0 for second line of display
                      17     
  00C8                18                     T2CON EQU 0C8H               ;T2CON registry location
  00CB                19                     RCAP2H EQU 0CBH              ;reload value for t2 location high
  00CA                20                     RCAP2L EQU 0CAH              ;reload value for t2 location low
                      21     
  00CD                22                     T2H EQU 0CDH                 ;timer 2 value high
  00CC                23                     T2L EQU 0CCH                 ;timer 2 value low
                      24     
  00A5                25                     INTERRUPTS EQU 10100101b        ;Interrupt flags, Global, Timer2, Button1, 
                             Button0
                      26     
  003A                27                     TICKCOUNT_1 EQU 3AH             ;Tick counter for refreshing displays
  003B                28                     BUTTON_COUNT EQU 3BH             ;Tick counter for buttons
  003C                29                     SECOND_COUNT EQU 3CH         ;Tick counter for seconds 1
  003D                30                     CHARACTER_COUNT EQU 3DH         ;Tick counter for seconds 2
  003E                31                     DEBOUNCER_COUNT EQU  3EH        ;Counter for debouncer, 20 ms
                      32     
  00A7                33                     REGISTER_SELECT EQU P2.7        ;RS LCD select signal
  00A6                34                     RW_ENABLE EQU P2.6              ;read write enable LCD signal
  0090                35                     LCD_DATA EQU P1                 ;LCD data bus
                      36     
  00B6                37                     GREEN_LED EQU P3.6
                      38     
  0030                39                     KEYPAD_VALUE EQU 30H            ;value of the key pressed
                      40     
                      41                     ;SUBROUTINE PARAMETERS
                      42                     ;====================================================================
  0031                43                     SEND_COMMAND_PARAM EQU 31H                                           ;
  0032                44                     SEND_DATA_PARAM EQU 32H                                              ;
  0033                45                     SEND_SERIAL_PARAM EQU 33H
                      46                     ;====================================================================
                      47                                     
                      48                                     ;Table for values:
                      49                                     ;==========================================================
                             ==========
  0034                50                                     TABLE_START EQU 34H
                      51                     
                      52                     ;Flags
  0001                53                     IS_NEXT_LINE EQU 20H.1          ;indicates if the LCD is already on the nex
                             t line   
                      54     
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 18:43:06 PAGE     2

0000                  55                     ORG     0000H                   ;RESET INTERRUPT
0000 803E             56                     JMP     START                   ;go to start on reset
                      57     
0003                  58                     ORG     0003H                   ;EXT0 INTERRUPT SWITCH BUTTON
0003 01B1             59                     JMP     EXT0IRS
                      60     
0013                  61                     ORG     0013H                   ;EXT1 INTERRUPT EDIT BUTTON
                      62                     ;JMP     EXT1IRS
                      63     
002B                  64                     ORG     002BH                   ;T2 INTERRUPT
002B 806A             65                     JMP     T2IRS                   ;Go to interrupt routine
                      66     
0040                  67                     ORG     0040H
0040 C2A6             68     START:          CLR     RW_ENABLE               ;(E) read write enable on 0
0042 C2A7             69                     CLR     REGISTER_SELECT         ;(RS) register select on 0
                      70                     
0044 75A8A5           71                     MOV     IE, #INTERRUPTS         ;enable global interrupt, enable timer 2 in
                             terrupt, enable ext1, enable ext0
                      72                     
0047 75B820           73                     MOV     IP, #00100000b          ;enable highest priority for timer 2
                      74                     
004A 75C800           75                     MOV     T2CON, #00000000b       ;reset T2 settings
004D 759840           76                     MOV     SCON,  #01000000b       ;set serial control settings
                      77                     
                      78                     ;Set timer 1 config
0050 758920           79                     MOV     TMOD,  #00100000b       ;set timer 1 to 8bit auto reload
0053 8587E0           80                     MOV     ACC, PCON               ;Get current pcon config
0056 D2E7             81                     SETB    ACC.7                   ;enable PCON.7 (double the baudrate)    
0058 85E087           82                     MOV     PCON, ACC               ;set PCON again
005B 85FD8D           83                     MOV     TH1, 253d               ;set baudrate to 19200 256 - ((Crystal/192)
                             /Baud) = 256 - (11059000/192)/19200 = 256 - 3 - 253
                      84                     
                      85                     
                      86     
005E 753A00           87                     MOV     TICKCOUNT_1, #0d            ;reset tick count for all counters
0061 753E00           88                     MOV     DEBOUNCER_COUNT, #0d
0064 753B02           89                     MOV     BUTTON_COUNT, #2d
0067 753C00           90                     MOV     SECOND_COUNT, #0d
006A 753D00           91                     MOV     CHARACTER_COUNT, #0d
                      92                     
006D C201             93                     CLR     IS_NEXT_LINE                 ;set is_next_line to false
                      94                                     
006F 753460           95                                     MOV             TABLE_START, #60H                       ;se
                             t value of table start to 60H
                      96                     
                      97     
0072 D2B6             98                     SETB    GREEN_LED
                      99     
0074 75CB4C          100                     MOV     RCAP2H, #76                 ;Load F830H into reload value (65536 - 
                             46079) = 19,457, 50ms tick
0077 75CA01          101                     MOV     RCAP2L, #01                 ; ^
                     102     
007A 75CD4C          103                     MOV     T2H, #76                    ;start timer at reload value
007D 75CC01          104                     MOV     T2L, #01                    ;
                     105     
0080 753200          106                     MOV     SEND_DATA_PARAM, #00H
0083 753100          107                     MOV     SEND_COMMAND_PARAM, #00H
                     108     
0086 75C804          109                     MOV     T2CON, #00000100b           ;Start T2
                     110                                     
0089 11D7            111                                     ACALL   INIT_TABLE
                     112     
008B 753101          113                     MOV     SEND_COMMAND_PARAM, #01H    ;clear display command
008E 3108            114                     ACALL   SEND_COMMAND
                     115     
0090 75310F          116                     MOV     SEND_COMMAND_PARAM, #0FH    ;initialize display
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 18:43:06 PAGE     3

0093 3108            117                     ACALL   SEND_COMMAND
                     118     
0095 80FE            119                     JMP     $                           ;wait for interrupts
                     120     
                     121     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;TRIGGERS;;;;;;;;;;;;;;;;;;;;;;;;
                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                     122     ;Triggered every T2 interrupt
0097 C0D0            123     T2IRS:          PUSH    PSW
0099 C0E0            124                     PUSH    ACC
009B B2CF            125                     CPL     T2CON.7              ;reset T2 settings
009D B2CA            126                     CPL     T2CON.2              ;
009F 11AC            127                     ACALL   TICK                 ;go to tick routine
                     128     
00A1 D0E0            129     EXIT_T2IRS:     POP     ACC                  ;return ACC
00A3 D0D0            130                     POP     PSW                  ;return PSW
00A5 75A8A5          131                     MOV     IE, #INTERRUPTS      ;enable interruptions again
00A8 75C804          132                     MOV     T2CON, #00000100b    ;Start T2
00AB 32              133                     RETI
                     134     ;Tick subroutine, called every 50 ms
00AC 053A            135     TICK:           INC TICKCOUNT_1
00AE 053C            136                     INC SECOND_COUNT
00B0 22              137                     RET
                     138     
                     139     ;Triggered every ext0 interrupt
00B1 C0D0            140     EXT0IRS:        PUSH    PSW
00B3 C0E0            141                     PUSH    ACC
00B5 C2A8            142                     CLR     EX0                  ;Disable external0 interrupt
00B7 C2AA            143                     CLR     EX1                  ;Disable external1 interrupt
00B9 3134            144                     ACALL   BUTTON_PRESSED       ;call button pressed routine
00BB D0E0            145     EXIT_EXT0IRS:   POP     ACC
00BD D0D0            146                     POP     PSW
00BF D2A8            147                     SETB    EX0                  ; reenable ext0 interrupt
00C1 D2AA            148                     SETB    EX1                  ; reenable ext1 interrupt
00C3 32              149                     RETI
                     150     
                     151     ;Triggered every ext1 interrupt
00C4 C0D0            152     EXT1IRS:        PUSH    PSW                ; save status before entering interrupt
00C6 C0E0            153                     PUSH    ACC
00C8 C2A8            154                     CLR     EX0
00CA C2AA            155                     CLR     EX1
00CC 3188            156                     ACALL   SEND_PRESSED
00CE D0E0            157     EXIT_EXT1IRS:   POP     ACC                ; load status after interrupt
00D0 D0D0            158                     POP     PSW
00D2 D2A8            159                     SETB    EX0                ; reenable ext0 interrupt
00D4 D2AA            160                     SETB    EX1                ; reenable ext1 interrupt
00D6 32              161                     RETI
                     162     
                     163     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ROUTINES;;;;;;;;;;;;;;;;;;;;;;;;
                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00D7 756031          164     INIT_TABLE:             MOV             60H, #31H       ;1
00DA 756132          165                                     MOV             61H, #32H       ;2
00DD 756233          166                                     MOV             62H, #33H       ;3
00E0 756341          167                                     MOV             63H, #41H       ;A      
00E3 756434          168                                     MOV             64H, #34H       ;4
00E6 756535          169                                     MOV             65H, #35H       ;5
00E9 756636          170                                     MOV             66H, #36H       ;6
00EC 756742          171                                     MOV             67H, #42H       ;B
00EF 756837          172                                     MOV             68H, #37H       ;7
00F2 756938          173                                     MOV             69H, #38H       ;8
00F5 756A39          174                                     MOV             6AH, #39H       ;9
00F8 756B43          175                                     MOV             6BH, #43H       ;C
00FB 756C2A          176                                     MOV             6CH, #2AH       ;*
00FE 756D30          177                                     MOV             6DH, #30H       ;0
0101 756E23          178                                     MOV             6EH, #23H       ;#
0104 756F44          179                                     MOV             6FH, #44H       ;D
0107 22              180                                     RET
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 18:43:06 PAGE     4

                     181     
                     182     
                     183     ;SEND_COMMAND
                     184     ;TAKES: SEND_COMMAND_PARAM
                     185     ;RUN Display routine for the LCD display
                     186     ;================================================================
0108 C2B6            187     SEND_COMMAND:   CLR     GREEN_LED                         ; turn on led
010A 853190          188                     MOV     LCD_DATA, SEND_COMMAND_PARAM      ; write init command to data bus
010D C2A7            189                     CLR     REGISTER_SELECT                   ; make sure RS is 0
010F 753A00          190                     MOV     TICKCOUNT_1, #0d
0112 D2A6            191                     SETB    RW_ENABLE                         ; activate write
0114 E53A            192     MOV_AG1:        MOV     A, TICKCOUNT_1
0116 B401FB          193                     CJNE    A, #1d, MOV_AG1                   ; wait 50ms
0119 C2A6            194                     CLR     RW_ENABLE                         ; deactivate write
011B D2B6            195                     SETB    GREEN_LED
011D 22              196                     RET
                     197     
                     198     ;SEND_DATA
                     199     ;TAKES: SEND_DATA_PARAM
                     200     ;RUN Display routine for the LCD display
                     201     ;================================================================
011E C2B6            202     SEND_DATA:      CLR     GREEN_LED                         ; turn on led
0120 853290          203                     MOV     LCD_DATA, SEND_DATA_PARAM         ; write init command to data bus
0123 D2A7            204                     SETB    REGISTER_SELECT                   ; make sure RS is 1
0125 753A00          205                     MOV     TICKCOUNT_1, #0d
0128 D2A6            206                     SETB    RW_ENABLE                         ; activate write
012A E53A            207     MOV_AG2:        MOV     A, TICKCOUNT_1
012C B401FB          208                     CJNE    A, #1d, MOV_AG2                   ; wait 50ms
012F C2A6            209                     CLR     RW_ENABLE                         ; deactivate write
0131 D2B6            210                     SETB    GREEN_LED
0133 22              211                     RET
                     212     
                     213     ; BUTTON PRESSED ROUTINE
                     214     ; SENDS THE DIRECT VALUE OF THE KEY PRESSED TO THE DISPLAY
                     215     ; ===============================================================
0134 E5A0            216     BUTTON_PRESSED: MOV     A, P2                                        ; save value of keypre
                             ssed into A
0136 540F            217                                     ANL             A, #0Fh                                    
                                                   ; do bitwise and with 0F to get only important 4 bits
0138 F530            218                                     MOV             KEYPAD_VALUE, A                            
                                       ; move value of A into keypad_value
013A E534            219                                     MOV             A, TABLE_START                             
                                       ; move value of table start to A (50H at moment of writing)
013C 2530            220                                     ADD             A, KEYPAD_VALUE                            
                                       ; add registered keypad value to A
013E F9              221                                     MOV             R1, A                                      
                                               ; move value to R0 so we can use as pointer and get table value
013F 8732            222                     MOV     SEND_DATA_PARAM, @R1                     ; set parameter value to v
                             alue pointed by R0 value
0141 3148            223                     ACALL   DISPLAY_CHECK                        ; check if cursor needs moving
0143 311E            224                     ACALL   SEND_DATA                            ; send data to LCD
0145 317F            225                     ACALL   WAIT_500MS                           ; wait 500ms for the hell of i
                             t 
0147 22              226     BP_EXIT:        RET
                     227     
                     228     ; DISPLAY CHECK ROUTINE
                     229     ; Check the display, if a new line is needed, moves the cursor to new line,
                     230     ; if both lines are full, clear screen.
                     231     ; uses CHARACTER_COUNT
0148 053D            232     DISPLAY_CHECK:  INC     CHARACTER_COUNT                     ;new character added to screen
014A E53D            233                     MOV     A, CHARACTER_COUNT                  ;move for comparison
014C B41016          234                     CJNE    A, #16d, DC_EXIT                    ;if the cursor doesnt need movi
                             ng, continue as usual
014F 753D00          235                     MOV     CHARACTER_COUNT, #0d                ;reset character line count
0152 10010B          236                     JBC     IS_NEXT_LINE, CLR_DISP              ;if its already on the next lin
                             e, clear display
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 18:43:06 PAGE     5

0155 D201            237                     SETB    IS_NEXT_LINE                        ;set isnextline to true
0157 753140          238                     MOV     SEND_COMMAND_PARAM, #40H            ;send command for moving cursor
                              to next line
015A 3108            239                     ACALL   SEND_COMMAND
015C 317F            240                                     ACALL   WAIT_500MS
015E 8005            241                     JMP     DC_EXIT
0160 753101          242     CLR_DISP:       MOV     SEND_COMMAND_PARAM, #01H            ;send command for clearing scre
                             en and returning cursor    
0163 3108            243                     ACALL   SEND_COMMAND             
0165 22              244     DC_EXIT:        RET
                     245     
                     246     ; ALT INPUT ROUTINE
                     247     ; SENDS HEXADECIMAL VALUE TO THE DISPLAY
                     248     ; ===============================================================
0166 D53B12          249     ALT_INPUT:      DJNZ    BUTTON_COUNT, REG_BUTTON             ; if the count is not zero, sa
                             ve the button value
0169 E530            250                     MOV     A, KEYPAD_VALUE                      ; if it is zero, send the valu
                             e to screen
016B C4              251                     SWAP    A
016C F530            252                     MOV     KEYPAD_VALUE, A                      ; move keypad value to Acc for
                              nibble swap
016E 7530A0          253                     MOV     KEYPAD_VALUE, #LOW(P2)               ; load value of keypad into ne
                             xt 4 bits
0171 753B02          254                     MOV     BUTTON_COUNT, #2d                    ; reset button count
0174 853032          255                     MOV     SEND_DATA_PARAM, KEYPAD_VALUE        ; set parameter value
0177 311E            256                     ACALL   SEND_DATA                            ; send data to LCD
0179 8003            257                     JMP     AI_EXIT                              ; exit
017B 7530A0          258     REG_BUTTON:     MOV     KEYPAD_VALUE, #LOW(P2)               ; save
017E 22              259     AI_EXIT:        RET
                     260     
                     261     ; WAIT 500 MS ROUTINE
                     262     ; WAITS 500 MS, ALL OTHER ROUTINES STOPPED, EXCEPT TIMER
                     263     ; ================================================================
017F 753C00          264     WAIT_500MS:     MOV     SECOND_COUNT, #0d                    ;reset counter
0182 E53C            265     RCK:            MOV     A, SECOND_COUNT
0184 B414FB          266                     CJNE    A, #20d, RCK                         ;count to 20 for 1s 
0187 22              267                     RET                                          ;return
                     268                     
                     269                     
                     270     ;SEND PRESSED ROUTINE || Send Push button has been pressed, interrupt enabled.
                     271     ;sends all data from LCD display to serial, suing send_serial routine
                     272     ;=================================================================
0188 753A00          273     SEND_PRESSED:   MOV     TICKCOUNT_1, #0d
018B E53A            274     SPRCK:          MOV     A, TICKCOUNT_1
018D B502FB          275                     CJNE    A, 2d, SPRCK                ;debounce button
                     276                     ;read first byte from LCD to SEND_SERIAL_PARAM
                     277                     ;call SEND_SERIAL
                     278                     ;repeat until done
0190 22              279                     RET
                     280                     
                     281                     
                     282     ; SEND SERIAL DATA SUBROUTINE
                     283     ; SENDS BYTE STORED IN SEND_SERIAL_PARAM
                     284     ; ================================================================
0191 D299            285     SEND_SERIAL:    SETB    TI                                  ;set flag on
0193 853399          286                     MOV     SBUF, SEND_SERIAL_PARAM             ;move value to serial buffer
0196 C299            287                     CLR     TI
0198 3099FD          288                     JNB     TI, $                               ;jump if byte is not done sendi
                             ng
019B 22              289                     RET
                     290     
                     291     
                     292     END
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 18:43:06 PAGE     6

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . .  D ADDR   00E0H   A   
AI_EXIT. . . . . .  C ADDR   017EH   A   
ALT_INPUT. . . . .  C ADDR   0166H   A   
BP_EXIT. . . . . .  C ADDR   0147H   A   
BUTTON_COUNT . . .  N NUMB   003BH   A   
BUTTON_PRESSED . .  C ADDR   0134H   A   
CHARACTER_COUNT. .  N NUMB   003DH   A   
CLR_DISP . . . . .  C ADDR   0160H   A   
DC_EXIT. . . . . .  C ADDR   0165H   A   
DEBOUNCER_COUNT. .  N NUMB   003EH   A   
DISPLAY_CHECK. . .  C ADDR   0148H   A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXIT_EXT0IRS . . .  C ADDR   00BBH   A   
EXIT_EXT1IRS . . .  C ADDR   00CEH   A   
EXIT_T2IRS . . . .  C ADDR   00A1H   A   
EXT0IRS. . . . . .  C ADDR   00B1H   A   
EXT1IRS. . . . . .  C ADDR   00C4H   A   
GREEN_LED. . . . .  B ADDR   00B0H.6 A   
IE . . . . . . . .  D ADDR   00A8H   A   
INIT_TABLE . . . .  C ADDR   00D7H   A   
INTERRUPTS . . . .  N NUMB   00A5H   A   
IP . . . . . . . .  D ADDR   00B8H   A   
IS_NEXT_LINE . . .  B ADDR   0020H.1 A   
KEYPAD_VALUE . . .  N NUMB   0030H   A   
LCD_DATA . . . . .  D ADDR   0090H   A   
MOV_AG1. . . . . .  C ADDR   0114H   A   
MOV_AG2. . . . . .  C ADDR   012AH   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RCAP2H . . . . . .  N NUMB   00CBH   A   
RCAP2L . . . . . .  N NUMB   00CAH   A   
RCK. . . . . . . .  C ADDR   0182H   A   
REGISTER_SELECT. .  B ADDR   00A0H.7 A   
REG_BUTTON . . . .  C ADDR   017BH   A   
RW_ENABLE. . . . .  B ADDR   00A0H.6 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SECOND_COUNT . . .  N NUMB   003CH   A   
SEND_COMMAND . . .  C ADDR   0108H   A   
SEND_COMMAND_PARAM  N NUMB   0031H   A   
SEND_DATA. . . . .  C ADDR   011EH   A   
SEND_DATA_PARAM. .  N NUMB   0032H   A   
SEND_PRESSED . . .  C ADDR   0188H   A   
SEND_SERIAL. . . .  C ADDR   0191H   A   
SEND_SERIAL_PARAM.  N NUMB   0033H   A   
SPRCK. . . . . . .  C ADDR   018BH   A   
START. . . . . . .  C ADDR   0040H   A   
T2CON. . . . . . .  N NUMB   00C8H   A   
T2H. . . . . . . .  N NUMB   00CDH   A   
T2IRS. . . . . . .  C ADDR   0097H   A   
T2L. . . . . . . .  N NUMB   00CCH   A   
TABLE_START. . . .  N NUMB   0034H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TICK . . . . . . .  C ADDR   00ACH   A   
TICKCOUNT_1. . . .  N NUMB   003AH   A   
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 18:43:06 PAGE     7

TMOD . . . . . . .  D ADDR   0089H   A   
WAIT_500MS . . . .  C ADDR   017FH   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
