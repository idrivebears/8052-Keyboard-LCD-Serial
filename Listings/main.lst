A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     1


MACRO ASSEMBLER A51 V8.02c
OBJECT MODULE PLACED IN .\Objects\main.obj
ASSEMBLER INVOKED BY: C:\Keil_v5\C51\BIN\A51.EXE main.a51 SET(SMALL) DEBUG PRINT(.\Listings\main.lst) OBJECT(.\Objects\m
                      ain.obj) EP

LOC  OBJ            LINE     SOURCE

                       1     ;======================================================================|
                       2     ; Practica 4, FUNDAMENTOS DE MICROPROCESADORES, ITESO.     |
                       3     ; AUTORES:                                                             |
                       4     ;       -ALEJANDRO WALLS        is693215@iteso.mx                      |
                       5     ;       -MARIO EUGENIO ZUï¿½IGA   ie693110@iteso.mx                      |
                       6     ;======================================================================|
                       7     
                       8     ;P3            Serial
                       9     ;P2.0 - 2.3    Salida Decoder Teclado
                      10     ;P2.7          Senal E de LCD
                      11     ;P2.6          Senal RS de LCD
                      12     ;P1            Datos LCD
                      13     
                      14     ; use command 01 for clearing display
                      15     ; use command 80 for first line of display
                      16     ; use command C0 for second line of display
                      17     
  00C8                18                     T2CON EQU 0C8H               ;T2CON registry location
  00CB                19                     RCAP2H EQU 0CBH              ;reload value for t2 location high
  00CA                20                     RCAP2L EQU 0CAH              ;reload value for t2 location low
                      21     
  00CD                22                     T2H EQU 0CDH                 ;timer 2 value high
  00CC                23                     T2L EQU 0CCH                 ;timer 2 value low
                      24     
  00A5                25                     INTERRUPTS EQU 10100101b        ;Interrupt flags, Global, Timer2, Button1, 
                             Button0
                      26     
  003A                27                     TICKCOUNT_1 EQU 3AH             ;Tick counter for refreshing displays
  003B                28                     BUTTON_COUNT EQU 3BH             ;Tick counter for buttons
  003C                29                     SECOND_COUNT EQU 3CH         ;Tick counter for seconds 1
  003D                30                     CHARACTER_COUNT EQU 3DH         ;Tick counter for seconds 2
  003E                31                     DEBOUNCER_COUNT EQU  3EH        ;Counter for debouncer, 20 ms
                      32     
  00A7                33                     REGISTER_SELECT EQU P2.7        ;RS LCD select signal
  00A6                34                     RW_ENABLE EQU P2.6              ;read write enable LCD signal
  0090                35                     LCD_DATA EQU P1                 ;LCD data bus
                      36     
  00B6                37                     GREEN_LED EQU P3.6
                      38     
  0040                39                     KEYPAD_VALUE EQU 40H            ;value of the key pressed
                      40     
                      41                     ;SUBROUTINE PARAMETERS
                      42                     ;====================================================================
  0050                43                     SEND_COMMAND_PARAM EQU 50H                                           ;
  0051                44                     SEND_DATA_PARAM EQU 51H                                              ;
  0052                45                     SEND_SERIAL_PARAM EQU 52H
                      46                     ;====================================================================
                      47                                     
                      48                                     ;Table for values:
                      49                                     ;==========================================================
                             ==========
  0041                50                                     TABLE_START EQU 41H
                      51                     
                      52                     ;Flags
  0001                53                     IS_NEXT_LINE EQU 20H.1          ;indicates if the LCD is already on the nex
                             t line   
                      54     
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     2

0000                  55                     ORG     0000H                   ;RESET INTERRUPT
0000 803E             56                     JMP     START                   ;go to start on reset
                      57     
0003                  58                     ORG     0003H                   ;EXT0 INTERRUPT SWITCH BUTTON
0003 01B6             59                     JMP     EXT0IRS
                      60     
0013                  61                     ORG     0013H                   ;EXT1 INTERRUPT EDIT BUTTON
                      62                     ;JMP     EXT1IRS
                      63     
002B                  64                     ORG     002BH                   ;T2 INTERRUPT
002B 806F             65                     JMP     T2IRS                   ;Go to interrupt routine
                      66     
0040                  67                     ORG     0040H
0040 C2A6             68     START:          CLR     RW_ENABLE               ;(E) read write enable on 0
0042 C2A7             69                     CLR     REGISTER_SELECT         ;(RS) register select on 0
                      70                     
0044 75A8A5           71                     MOV     IE, #INTERRUPTS         ;enable global interrupt, enable timer 2 in
                             terrupt, enable ext1, enable ext0
                      72                     
0047 75B820           73                     MOV     IP, #00100000b          ;enable highest priority for timer 2
                      74                     
004A 75C800           75                     MOV     T2CON, #00000000b       ;reset T2 settings
004D 759840           76                     MOV     SCON,  #01000000b       ;set serial control settings
                      77                     
                      78                     ;Set timer 1 config
0050 758920           79                     MOV     TMOD,  #00100000b       ;set timer 1 to 8bit auto reload
0053 8587E0           80                     MOV     ACC, PCON               ;Get current pcon config
0056 D2E7             81                     SETB    ACC.7                   ;enable PCON.7 (double the baudrate)    
0058 85E087           82                     MOV     PCON, ACC               ;set PCON again
005B 85FD8D           83                     MOV     TH1, 253d               ;set baudrate to 19200 256 - ((Crystal/192)
                             /Baud) = 256 - (11059000/192)/19200 = 256 - 3 - 253
                      84                     
                      85                     
                      86     
005E 753A00           87                     MOV     TICKCOUNT_1, #0d            ;reset tick count for all counters
0061 753E00           88                     MOV     DEBOUNCER_COUNT, #0d
0064 753B02           89                     MOV     BUTTON_COUNT, #2d
0067 753C00           90                     MOV     SECOND_COUNT, #0d
006A 753D00           91                     MOV     CHARACTER_COUNT, #0d
                      92                     
006D C201             93                     CLR     IS_NEXT_LINE                 ;set is_next_line to false
                      94                                     
006F 754160           95                                     MOV             TABLE_START, #60H                       ;se
                             t value of table start to 60H
                      96                     
                      97     
0072 D2B6             98                     SETB    GREEN_LED
                      99     
0074 75CB4C          100                     MOV     RCAP2H, #76                 ;Load F830H into reload value (65536 - 
                             46079) = 19,457, 50ms tick
0077 75CA01          101                     MOV     RCAP2L, #01                 ; ^
                     102     
007A 75CD4C          103                     MOV     T2H, #76                    ;start timer at reload value
007D 75CC01          104                     MOV     T2L, #01                    ;
                     105     
0080 755100          106                     MOV     SEND_DATA_PARAM, #00H
0083 755000          107                     MOV     SEND_COMMAND_PARAM, #00H
                     108     
0086 75C804          109                     MOV     T2CON, #00000100b           ;Start T2
                     110                                     
0089 11DC            111                                     ACALL   INIT_TABLE
                     112     
008B 755001          113                     MOV     SEND_COMMAND_PARAM, #01H    ;clear display command
008E 310D            114                     ACALL   SEND_COMMAND
                     115     
0090 75500F          116                     MOV     SEND_COMMAND_PARAM, #0FH    ;initialize display
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     3

0093 310D            117                     ACALL   SEND_COMMAND
                     118                                     
0095 7550C0          119                                     MOV             SEND_COMMAND_PARAM, #0C0H       ;test new l
                             ine select
0098 310D            120                                     ACALL   SEND_COMMAND
                     121     
009A 80FE            122                     JMP     $                           ;wait for interrupts
                     123     
                     124     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;TRIGGERS;;;;;;;;;;;;;;;;;;;;;;;;
                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                     125     ;Triggered every T2 interrupt
009C C0D0            126     T2IRS:          PUSH    PSW
009E C0E0            127                     PUSH    ACC
00A0 B2CF            128                     CPL     T2CON.7              ;reset T2 settings
00A2 B2CA            129                     CPL     T2CON.2              ;
00A4 11B1            130                     ACALL   TICK                 ;go to tick routine
                     131     
00A6 D0E0            132     EXIT_T2IRS:     POP     ACC                  ;return ACC
00A8 D0D0            133                     POP     PSW                  ;return PSW
00AA 75A8A5          134                     MOV     IE, #INTERRUPTS      ;enable interruptions again
00AD 75C804          135                     MOV     T2CON, #00000100b    ;Start T2
00B0 32              136                     RETI
                     137     ;Tick subroutine, called every 50 ms
00B1 053A            138     TICK:           INC TICKCOUNT_1
00B3 053C            139                     INC SECOND_COUNT
00B5 22              140                     RET
                     141     
                     142     ;Triggered every ext0 interrupt
00B6 C0D0            143     EXT0IRS:        PUSH    PSW
00B8 C0E0            144                     PUSH    ACC
00BA C2A8            145                     CLR     EX0                  ;Disable external0 interrupt
00BC C2AA            146                     CLR     EX1                  ;Disable external1 interrupt
00BE 3139            147                     ACALL   BUTTON_PRESSED       ;call button pressed routine
00C0 D0E0            148     EXIT_EXT0IRS:   POP     ACC
00C2 D0D0            149                     POP     PSW
00C4 D2A8            150                     SETB    EX0                  ; reenable ext0 interrupt
00C6 D2AA            151                     SETB    EX1                  ; reenable ext1 interrupt
00C8 32              152                     RETI
                     153     
                     154     ;Triggered every ext1 interrupt
00C9 C0D0            155     EXT1IRS:        PUSH    PSW                ; save status before entering interrupt
00CB C0E0            156                     PUSH    ACC
00CD C2A8            157                     CLR     EX0
00CF C2AA            158                     CLR     EX1
00D1 318D            159                     ACALL   SEND_PRESSED
00D3 D0E0            160     EXIT_EXT1IRS:   POP     ACC                ; load status after interrupt
00D5 D0D0            161                     POP     PSW
00D7 D2A8            162                     SETB    EX0                ; reenable ext0 interrupt
00D9 D2AA            163                     SETB    EX1                ; reenable ext1 interrupt
00DB 32              164                     RETI
                     165     
                     166     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ROUTINES;;;;;;;;;;;;;;;;;;;;;;;;
                             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00DC 756031          167     INIT_TABLE:             MOV             60H, #31H       ;1
00DF 756132          168                                     MOV             61H, #32H       ;2
00E2 756233          169                                     MOV             62H, #33H       ;3
00E5 756341          170                                     MOV             63H, #41H       ;A      
00E8 756434          171                                     MOV             64H, #34H       ;4
00EB 756535          172                                     MOV             65H, #35H       ;5
00EE 756636          173                                     MOV             66H, #36H       ;6
00F1 756742          174                                     MOV             67H, #42H       ;B
00F4 756837          175                                     MOV             68H, #37H       ;7
00F7 756938          176                                     MOV             69H, #38H       ;8
00FA 756A39          177                                     MOV             6AH, #39H       ;9
00FD 756B43          178                                     MOV             6BH, #43H       ;C
0100 756C2A          179                                     MOV             6CH, #2AH       ;*
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     4

0103 756D30          180                                     MOV             6DH, #30H       ;0
0106 756E23          181                                     MOV             6EH, #23H       ;#
0109 756F44          182                                     MOV             6FH, #44H       ;D
010C 22              183                                     RET
                     184     
                     185     
                     186     ;SEND_COMMAND
                     187     ;TAKES: SEND_COMMAND_PARAM
                     188     ;RUN Display routine for the LCD display
                     189     ;================================================================
010D C2B6            190     SEND_COMMAND:   CLR     GREEN_LED                         ; turn on led
010F 855090          191                     MOV     LCD_DATA, SEND_COMMAND_PARAM      ; write init command to data bus
0112 C2A7            192                     CLR     REGISTER_SELECT                   ; make sure RS is 0
0114 753A00          193                     MOV     TICKCOUNT_1, #0d
0117 D2A6            194                     SETB    RW_ENABLE                         ; activate write
0119 E53A            195     MOV_AG1:        MOV     A, TICKCOUNT_1
011B B401FB          196                     CJNE    A, #1d, MOV_AG1                   ; wait 50ms
011E C2A6            197                     CLR     RW_ENABLE                         ; deactivate write
0120 D2B6            198                     SETB    GREEN_LED
0122 22              199                     RET
                     200     
                     201     ;SEND_DATA
                     202     ;TAKES: SEND_DATA_PARAM
                     203     ;RUN Display routine for the LCD display
                     204     ;================================================================
0123 C2B6            205     SEND_DATA:      CLR     GREEN_LED                         ; turn on led
0125 855190          206                     MOV     LCD_DATA, SEND_DATA_PARAM         ; write init command to data bus
0128 D2A7            207                     SETB    REGISTER_SELECT                   ; make sure RS is 1
012A 753A00          208                     MOV     TICKCOUNT_1, #0d
012D D2A6            209                     SETB    RW_ENABLE                         ; activate write
012F E53A            210     MOV_AG2:        MOV     A, TICKCOUNT_1
0131 B401FB          211                     CJNE    A, #1d, MOV_AG2                   ; wait 50ms
0134 C2A6            212                     CLR     RW_ENABLE                         ; deactivate write
0136 D2B6            213                     SETB    GREEN_LED
0138 22              214                     RET
                     215     
                     216     ; BUTTON PRESSED ROUTINE
                     217     ; SENDS THE DIRECT VALUE OF THE KEY PRESSED TO THE DISPLAY
                     218     ; ===============================================================
0139 E5A0            219     BUTTON_PRESSED: MOV     A, P2                                        ; save value of keypre
                             ssed into A
013B 540F            220                                     ANL             A, #0Fh                                    
                                                   ; do bitwise and with 0F to get only important 4 bits
013D F540            221                                     MOV             KEYPAD_VALUE, A                            
                                       ; move value of A into keypad_value
013F E541            222                                     MOV             A, TABLE_START                             
                                       ; move value of table start to A (50H at moment of writing)
0141 2540            223                                     ADD             A, KEYPAD_VALUE                            
                                       ; add registered keypad value to A
0143 F9              224                                     MOV             R1, A                                      
                                               ; move value to R0 so we can use as pointer and get table value
0144 8751            225                     MOV     SEND_DATA_PARAM, @R1                     ; set parameter value to v
                             alue pointed by R0 value
0146 314D            226                     ACALL   DISPLAY_CHECK                        ; check if cursor needs moving
0148 3123            227                     ACALL   SEND_DATA                            ; send data to LCD
014A 3184            228                     ACALL   WAIT_500MS                           ; wait 500ms for the hell of i
                             t 
014C 22              229     BP_EXIT:        RET
                     230     
                     231     ; DISPLAY CHECK ROUTINE
                     232     ; Check the display, if a new line is needed, moves the cursor to new line,
                     233     ; if both lines are full, clear screen.
                     234     ; uses CHARACTER_COUNT
014D 053D            235     DISPLAY_CHECK:  INC     CHARACTER_COUNT                     ;new character added to screen
014F E53D            236                     MOV     A, CHARACTER_COUNT                  ;move for comparison
0151 B41016          237                     CJNE    A, #16d, DC_EXIT                    ;if the cursor doesnt need movi
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     5

                             ng, continue as usual
0154 753D00          238                     MOV     CHARACTER_COUNT, #0d                ;reset character line count
0157 10010B          239                     JBC     IS_NEXT_LINE, CLR_DISP              ;if its already on the next lin
                             e, clear display
015A D201            240                     SETB    IS_NEXT_LINE                        ;set isnextline to true
015C 7550C0          241                     MOV     SEND_COMMAND_PARAM, #11000000b      ;send command for moving cursor
                              to next line
015F 310D            242                     ACALL   SEND_COMMAND
0161 3184            243                                     ACALL   WAIT_500MS
0163 8005            244                     JMP     DC_EXIT
                     245                     
0165 755001          246     CLR_DISP:       MOV     SEND_COMMAND_PARAM, #01H            ;send command for clearing scre
                             en and returning cursor    
0168 310D            247                     ACALL   SEND_COMMAND             
016A 22              248     DC_EXIT:        RET
                     249     
                     250     ; ALT INPUT ROUTINE
                     251     ; SENDS HEXADECIMAL VALUE TO THE DISPLAY
                     252     ; ===============================================================
016B D53B12          253     ALT_INPUT:      DJNZ    BUTTON_COUNT, REG_BUTTON             ; if the count is not zero, sa
                             ve the button value
016E E540            254                     MOV     A, KEYPAD_VALUE                      ; if it is zero, send the valu
                             e to screen
0170 C4              255                     SWAP    A
0171 F540            256                     MOV     KEYPAD_VALUE, A                      ; move keypad value to Acc for
                              nibble swap
0173 7540A0          257                     MOV     KEYPAD_VALUE, #LOW(P2)               ; load value of keypad into ne
                             xt 4 bits
0176 753B02          258                     MOV     BUTTON_COUNT, #2d                    ; reset button count
0179 854051          259                     MOV     SEND_DATA_PARAM, KEYPAD_VALUE        ; set parameter value
017C 3123            260                     ACALL   SEND_DATA                            ; send data to LCD
017E 8003            261                     JMP     AI_EXIT                              ; exit
0180 7540A0          262     REG_BUTTON:     MOV     KEYPAD_VALUE, #LOW(P2)               ; save
0183 22              263     AI_EXIT:        RET
                     264     
                     265     ; WAIT 500 MS ROUTINE
                     266     ; WAITS 500 MS, ALL OTHER ROUTINES STOPPED, EXCEPT TIMER
                     267     ; ================================================================
0184 753C00          268     WAIT_500MS:     MOV     SECOND_COUNT, #0d                    ;reset counter
0187 E53C            269     RCK:            MOV     A, SECOND_COUNT
0189 B414FB          270                     CJNE    A, #20d, RCK                         ;count to 20 for 1s 
018C 22              271                     RET                                          ;return
                     272                     
                     273                     
                     274     ;SEND PRESSED ROUTINE || Send Push button has been pressed, interrupt enabled.
                     275     ;sends all data from LCD display to serial, suing send_serial routine
                     276     ;=================================================================
018D 753A00          277     SEND_PRESSED:   MOV     TICKCOUNT_1, #0d
0190 E53A            278     SPRCK:          MOV     A, TICKCOUNT_1
0192 B502FB          279                     CJNE    A, 2d, SPRCK                ;debounce button
                     280                     ;read first byte from LCD to SEND_SERIAL_PARAM
                     281                     ;call SEND_SERIAL
                     282                     ;repeat until done
0195 22              283                     RET
                     284                     
                     285                     
                     286     ; SEND SERIAL DATA SUBROUTINE
                     287     ; SENDS BYTE STORED IN SEND_SERIAL_PARAM
                     288     ; ================================================================
0196 D299            289     SEND_SERIAL:    SETB    TI                                  ;set flag on
0198 855299          290                     MOV     SBUF, SEND_SERIAL_PARAM             ;move value to serial buffer
019B C299            291                     CLR     TI
019D 3099FD          292                     JNB     TI, $                               ;jump if byte is not done sendi
                             ng
01A0 22              293                     RET
                     294     
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     6

                     295     
                     296     END
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     7

SYMBOL TABLE LISTING
------ ----- -------


N A M E             T Y P E  V A L U E   ATTRIBUTES

ACC. . . . . . . .  D ADDR   00E0H   A   
AI_EXIT. . . . . .  C ADDR   0183H   A   
ALT_INPUT. . . . .  C ADDR   016BH   A   
BP_EXIT. . . . . .  C ADDR   014CH   A   
BUTTON_COUNT . . .  N NUMB   003BH   A   
BUTTON_PRESSED . .  C ADDR   0139H   A   
CHARACTER_COUNT. .  N NUMB   003DH   A   
CLR_DISP . . . . .  C ADDR   0165H   A   
DC_EXIT. . . . . .  C ADDR   016AH   A   
DEBOUNCER_COUNT. .  N NUMB   003EH   A   
DISPLAY_CHECK. . .  C ADDR   014DH   A   
EX0. . . . . . . .  B ADDR   00A8H.0 A   
EX1. . . . . . . .  B ADDR   00A8H.2 A   
EXIT_EXT0IRS . . .  C ADDR   00C0H   A   
EXIT_EXT1IRS . . .  C ADDR   00D3H   A   
EXIT_T2IRS . . . .  C ADDR   00A6H   A   
EXT0IRS. . . . . .  C ADDR   00B6H   A   
EXT1IRS. . . . . .  C ADDR   00C9H   A   
GREEN_LED. . . . .  B ADDR   00B0H.6 A   
IE . . . . . . . .  D ADDR   00A8H   A   
INIT_TABLE . . . .  C ADDR   00DCH   A   
INTERRUPTS . . . .  N NUMB   00A5H   A   
IP . . . . . . . .  D ADDR   00B8H   A   
IS_NEXT_LINE . . .  B ADDR   0020H.1 A   
KEYPAD_VALUE . . .  N NUMB   0040H   A   
LCD_DATA . . . . .  D ADDR   0090H   A   
MOV_AG1. . . . . .  C ADDR   0119H   A   
MOV_AG2. . . . . .  C ADDR   012FH   A   
P1 . . . . . . . .  D ADDR   0090H   A   
P2 . . . . . . . .  D ADDR   00A0H   A   
P3 . . . . . . . .  D ADDR   00B0H   A   
PCON . . . . . . .  D ADDR   0087H   A   
PSW. . . . . . . .  D ADDR   00D0H   A   
RCAP2H . . . . . .  N NUMB   00CBH   A   
RCAP2L . . . . . .  N NUMB   00CAH   A   
RCK. . . . . . . .  C ADDR   0187H   A   
REGISTER_SELECT. .  B ADDR   00A0H.7 A   
REG_BUTTON . . . .  C ADDR   0180H   A   
RW_ENABLE. . . . .  B ADDR   00A0H.6 A   
SBUF . . . . . . .  D ADDR   0099H   A   
SCON . . . . . . .  D ADDR   0098H   A   
SECOND_COUNT . . .  N NUMB   003CH   A   
SEND_COMMAND . . .  C ADDR   010DH   A   
SEND_COMMAND_PARAM  N NUMB   0050H   A   
SEND_DATA. . . . .  C ADDR   0123H   A   
SEND_DATA_PARAM. .  N NUMB   0051H   A   
SEND_PRESSED . . .  C ADDR   018DH   A   
SEND_SERIAL. . . .  C ADDR   0196H   A   
SEND_SERIAL_PARAM.  N NUMB   0052H   A   
SPRCK. . . . . . .  C ADDR   0190H   A   
START. . . . . . .  C ADDR   0040H   A   
T2CON. . . . . . .  N NUMB   00C8H   A   
T2H. . . . . . . .  N NUMB   00CDH   A   
T2IRS. . . . . . .  C ADDR   009CH   A   
T2L. . . . . . . .  N NUMB   00CCH   A   
TABLE_START. . . .  N NUMB   0041H   A   
TH1. . . . . . . .  D ADDR   008DH   A   
TI . . . . . . . .  B ADDR   0098H.1 A   
TICK . . . . . . .  C ADDR   00B1H   A   
TICKCOUNT_1. . . .  N NUMB   003AH   A   
A51 MACRO ASSEMBLER  MAIN                                                                 11/23/2015 17:46:18 PAGE     8

TMOD . . . . . . .  D ADDR   0089H   A   
WAIT_500MS . . . .  C ADDR   0184H   A   


REGISTER BANK(S) USED: 0 


ASSEMBLY COMPLETE.  0 WARNING(S), 0 ERROR(S)
